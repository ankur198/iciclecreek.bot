@page "/"
@inject HttpClient Http
@inherits LayoutComponentBase
<!-- layout -->
<div class="grid">
    <TextEdit Class="grid-query" Placeholder="Enter utterance..." Text="@Text" TextChanged="@OnTextChanged" DelayTextOnKeyPress="true" />

    <Text Class="grid-yamlheading">
        <Link Target="Target.Blank" To="https://github.com/tomlm/iciclecreek.bot/blob/master/source/Libraries/Lucy.net/readme.md">Overview</Link>
        <Link Target="Target.Blank" To="https://github.com/tomlm/iciclecreek.bot/blob/master/source/Libraries/Lucy.net/help.md">Help</Link>
    </Text>

    <MonacoEditorYaml @ref="yamlEditor" Id="monacoEditorYaml" Value="@Yaml" CssClass="grid-yaml" />

    <Alert Class="grid-alert" @ref="alertBox" Color="Color.Warning">
        <AlertDescription>
            @Error
        </AlertDescription>
    </Alert>

    <Text Class="grid-resultheading">Entities</Text>

    <Accordion Class="grid-results">
        <Collapse Visible="@TopResultVisible">
            <CollapseHeader>
                <Heading Size="HeadingSize.Is6">
                    <Button Clicked="@(()=> TopResultVisible= !TopResultVisible)">Top Result</Button>
                </Heading>
            </CollapseHeader>
            <CollapseBody>
                <text>@Elapsed</text>
                <plaintext>@TopResult</plaintext>
            </CollapseBody>
        </Collapse>
        <Collapse Visible="@AllResultsVisible">
            <CollapseHeader>
                <Heading Size="HeadingSize.Is6">
                    <Button Clicked="@(()=>AllResultsVisible= !AllResultsVisible)">All Results</Button>
                </Heading>
            </CollapseHeader>
            <CollapseBody>
                <plaintext>@EntityResults</plaintext>
            </CollapseBody>
        </Collapse>
    </Accordion>
</div>

@code {

    private MonacoEditorYaml yamlEditor;
    private Alert alertBox;

    private LucyEngine engine = null;
    private LucyRecognizer recognizer = null;
    private string lucyModel = null;
    private JsonConverter patternModelConverter = new PatternModelConverter();

    private IDeserializer yamlDeserializer = new DeserializerBuilder()
                                                .WithNamingConvention(CamelCaseNamingConvention.Instance)
                                                .Build();
    private ISerializer yamlToJsonSerializer = new SerializerBuilder()
                                            .JsonCompatible()
                                            .Build();

    public bool TopResultVisible = true;

    public bool AllResultsVisible = false;

    public string Yaml { get; set; }

    public string TopResult { get; set; }

    public string EntityResults { get; set; }

    public string Text { get; set; }

    public string Error { get; set; } = "---";

    public string Elapsed { get; set; }

    protected override void OnInitialized()
    {
        this.Yaml = LoadResource("LucyPad2.Client.lucy.yaml");
    }

    private string LoadResource(string name)
    {
        var assembly = Assembly.GetExecutingAssembly();
        using (Stream stream = assembly.GetManifestResourceStream(name))
        {
            using (StreamReader reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }

    }

    async Task OnTextChanged(string value)
    {
        try
        {
            var yaml = await yamlEditor.GetValue();
            var text = value.Trim() ?? string.Empty;
            IEnumerable<LucyEntity> results = null;
            if (text.Length == 0)
            {
                return;
            }
#if embedded
    if (lucyModel != yaml)
    {
        LoadModel(yaml);
    }

    var sw = new System.Diagnostics.Stopwatch();
    sw.Start();
    results = engine.MatchEntities(text);
    sw.Stop();
    this.Elapsed = $"{sw.Elapsed.TotalMilliseconds} ms";
#else
            var sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            var result = await Http.PostAsJsonAsync("entities", new EntitiesRequest
            {
                yaml = yaml,
                text = text
            });
            sw.Stop();
            // this.Elapsed = $"Network: {sw.Elapsed.TotalMilliseconds} ms";
            var entityResponse = JsonConvert.DeserializeObject<EntitiesResponse>(await result.Content.ReadAsStringAsync());

            this.Elapsed = $"{entityResponse.elapsed} ms";

            if (!String.IsNullOrEmpty(entityResponse.message))
            {
                this.Error = entityResponse.message;
                this.alertBox.Show();
            }
            else
            {
                this.alertBox.Hide();
            }
            results = entityResponse.entities;
#endif

            this.TopResultVisible = true;
            this.AllResultsVisible = false;
            this.TopResult = LucyEngine.VisualizeEntity(text, results.FirstOrDefault());
            this.EntityResults = String.Join("\n\n", results.Select(entity => LucyEngine.VisualizeEntity(text, entity)));
        }
        catch (SemanticErrorException err)
        {
            this.Error = err.Message;
            this.alertBox.Show();
            //this.editor.ScrollToLine(err.Start.Line);
            //var line = this.editor.Document.GetLineByNumber(err.Start.Line - 1);
            //this.editor.Select(line.Offset, line.Length);
        }
        catch (SyntaxErrorException err)
        {
            this.Error = err.Message;
            this.alertBox.Show();
            //this.error.Visibility = Visibility.Visible;
            //this.editor.ScrollToLine(err.Start.Line);
            //var line = this.editor.Document.GetLineByNumber(err.Start.Line - 1);
            //this.editor.Select(line.Offset, line.Length);
        }
        catch (Exception err)
        {
            this.Error = err.Message;
            this.alertBox.Show();
            //this.error.Content = err.Message;
            //this.error.Visibility = Visibility.Visible;
        }
    }

    private void LoadModel(string yaml)
    {
        // Trace.TraceInformation("Loading model");
        var reader = new StringReader(yaml);
        var x = yamlDeserializer.Deserialize(new StringReader(yaml));
        var json = yamlToJsonSerializer.Serialize(x);
        var model = JsonConvert.DeserializeObject<LucyModel>(json, patternModelConverter);
        engine = new LucyEngine(model, useAllBuiltIns: true);
        recognizer = new LucyRecognizer()
        {
            Model = model,
        };

        // this.examplesBox.Text = sb.ToString();

        if (engine.Warnings.Any())
        {
            this.Error = String.Join("\n", engine.Warnings);
            this.alertBox.Show();
        }
        else
        {
            this.Error = string.Empty;
            this.alertBox.Hide();
        }
        lucyModel = yaml;
    }
}
